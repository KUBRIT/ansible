# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# ADDED VIA ANSIBLE

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


############## custom aliases and others ###############

alias "vpnconnect"='sudo openvpn --config ~/openvpnconfig.ovpn'
alias "dataserver"='ssh dataserver'
alias "publicipscan"='sudo tcpdump -i enp0s31f6 host <your_public_ip>'

# monitor settings
alias "m1"='xrandr --output eDP-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output DP-1 --off'
alias "m2"='xrandr --output eDP-1 --mode 1920x1080 --pos 1920x0 --rotate normal --output DP-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal'

function rsync-download() {
	read -p "Enter Domain/IP for remote connection: " REMOTE_IP
	read -p "Enter sync directory from (remote)[$HOME - press enter for default]: " DIR_FROM
	read -p "Enter sync directory to (local)[$HOME - press enter for default]: " DIR_TO
	rsync -av --progress -e ssh $REMOTE_IP:$HOME/$DIR_FROM $HOME/$DIR_TO
}

function rsync-upload() {
	read -p "Enter Domain/IP for remote connection: " REMOTE_IP
	read -p "Enter sync directory from (local)[$HOME - press enter for default]: " DIR_FROM
	read -p "Enter sync directory to (remote)[$HOME - press enter for default]: " DIR_TO
	rsync -avH --progress ${HOME}/${DIR_FROM} -e ssh $USER@$REMOTE_IP:${HOME}/${DIR_TO}
}

function check_certs () {
	if [ -z "$1" ]
	then
		echo "domain name missing"
		exit 1
	fi
	name="$1"
	shift
	now_epoch=$( date +%s )
	dig +noall +answer $name | while read _ _ _ _ ip;
	do
		echo -n "$ip:"
		expiry_date=$( echo | openssl s_client -showcerts -servername $name -connect $ip:443 2>/dev/null | openssl x509 -inform pem -noout -enddate | cut -d "=" -f 2 )
		echo -n " $expiry_date";
		expiry_epoch=$( date -d "$expiry_date" +%s )
		expiry_days="$(( ($expiry_epoch - $now_epoch) / (3600 * 24) ))"
		echo "    $expiry_days days"
	done
}

function create_ssl () {
    read -p "Enter app name (f.e. bitwarden): " APP_NAME
    mkdir -p ~/ssl/$APP_NAME/
    WORK_DIR="~/ssl/$APP_NAME/"
    cd ~/ssl/$APP_NAME/
    openssl genpkey -algorithm RSA -aes128 -out private-ca.key -outform PEM -pkeyopt rsa_keygen_bits:2048
    openssl req -x509 -new -nodes -sha256 -days 3650 -key private-ca.key -out self-signed-ca-cert.crt
    openssl genpkey -algorithm RSA -out $APP_NAME.key -outform PEM -pkeyopt rsa_keygen_bits:2048
    openssl req -new -key $APP_NAME.key -out $APP_NAME.csr
    openssl x509 -req -in $APP_NAME.csr -CA self-signed-ca-cert.crt -CAkey private-ca.key -CAcreateserial -out $APP_NAME.crt -days 365 -sha256
}
